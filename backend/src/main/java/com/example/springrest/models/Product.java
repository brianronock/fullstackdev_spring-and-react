package com.example.springrest.models;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.math.BigDecimal;

/**
 * Domain entity representing a product in the catalog.
 *
 * <p><strong>Persistence</strong>:
 * Mapped to the {@code products} table with an auto-incremented primary key.
 * Uses {@link jakarta.persistence.GenerationType#IDENTITY} for portability with common RDBMS engines.
 * </p>
 *
 * <p><strong>Validation</strong>:
 * - {@code name} must be non-blank and ≤ 120 chars.<br>
 * - {@code price} must be provided; database column enforces precision (12,2).
 * </p>
 *
 * <p><strong>Typical usage</strong>:</p>
 * <pre>{@code
 * // Create and persist a product
 * Product p = new Product("Coffee Mug", new BigDecimal("12.99"));
 * productRepo.save(p);
 *
 * // Retrieve or fail fast
 * Product found = productService.getOrThrow(p.getId());
 *
 * // Update through service (recommended; enforces business rules)
 * productService.update(p.getId(), prod -> {
 *     prod.setPrice(new BigDecimal("10.99"));
 * });
 * }</pre>
 *
 * <p><strong>Design notes</strong>:
 * Keep business logic in services. The entity holds only simple invariants and mappings.
 * </p>
 *
 * @since 1.0
 */
@Schema(description = "Represents a product entity with details such as unique ID, name, and price.")
@Entity
@Table(name = "products")
@Getter
@Setter
@NoArgsConstructor
public class Product {

    /**
     * Surrogate primary key (auto-generated).
     *
     * <p>Set by the database on insert; should be {@code null} for new instances.</p>
     */
    @Schema(
            description = "The unique ID for the product, auto-generated by the database(auto-increment).",
            example = "1"
    )
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Human-readable name of the product.
     *
     * <p>Non-blank; capped at 120 characters to protect the UI and indexes.</p>
     */
    @Schema(
            description = "The name of the product, must not be blank.",
            example = "Coffee Mug",
            requiredMode = Schema.RequiredMode.REQUIRED
    )
    @NotBlank(message = "Name is mandatory")
    @Column(nullable = false, length = 120)
    private String name;

    /**
     * Monetary price with two decimal places.
     *
     * <p>Persisted with precision 12 and scale 2 (max 9999999999.99).</p>
     */
    @Schema(
            description = "The price of the product, with a precision of 12 digits and 2 decimal places",
            example = "999.99",
            requiredMode = Schema.RequiredMode.REQUIRED
    )
    @NotNull(message = "Price must be provided")
    @Column(nullable = false, precision = 12, scale = 2)
    private BigDecimal price;

    /**
     * Convenience constructor for creating new products.
     *
     * @param name  non-blank product name (≤ 120 chars)
     * @param price price with up to two decimal places
     * @throws IllegalArgumentException if {@code name} is blank or {@code price} is {@code null}
     */
    public Product(String name, BigDecimal price) {
        this.name = name;
        this.price = price;
    }
}
